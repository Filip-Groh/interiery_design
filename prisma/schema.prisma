// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:database.db"
}

// Update formatting run: npx prisma format
// Update SQLite run: npx prisma migrate dev
// Update JS mapping run: npx prisma generate

// Interiery design

model Designer {
  id         Int      @id @default(autoincrement())
  createDate DateTime @default(now())
  updateDate DateTime @updatedAt

  name    String
  role    String
  email   String
  mobil   String
  image   Image  @relation(fields: [imageId], references: [id])
  imageId Int
}

model Realization {
  id         Int      @id @default(autoincrement())
  createDate DateTime @default(now())
  updateDate DateTime @updatedAt

  title    String
  comments Comment[]
  tags     Tag[]

  task    String
  image   Image[]
  preview Preview[]
}

model Article {
  id         Int      @id @default(autoincrement())
  createDate DateTime @default(now())
  updateDate DateTime @updatedAt

  title    String
  comments Comment[]
  tags     Tag[]

  text   String
  images Image[]
}

model Comment {
  id         Int      @id @default(autoincrement())
  createDate DateTime @default(now())
  updateDate DateTime @updatedAt

  title         String
  text          String
  likes         Int
  likers        User[]       @relation("like")
  dislikers     User[]       @relation("dislike")
  user          User         @relation(fields: [userId], references: [id])
  userId        String
  realization   Realization? @relation(fields: [realizationId], references: [id])
  realizationId Int?
  article       Article?     @relation(fields: [articleId], references: [id])
  articleId     Int?
}

model Preview {
  id         Int      @id @default(autoincrement())
  createDate DateTime @default(now())
  updateDate DateTime @updatedAt

  title  String
  images Image[]
  tags   Tag[]

  realization Realization[]
}

model Image {
  id         Int      @id @default(autoincrement())
  createDate DateTime @default(now())
  updateDate DateTime @updatedAt

  path        String
  description String
  tags        Tag[]

  realization Realization[]
  article     Article[]
  preview     Preview[]
  Designer    Designer[]
}

model Tag {
  id         Int      @id @default(autoincrement())
  createDate DateTime @default(now())
  updateDate DateTime @updatedAt

  name        String        @unique
  realization Realization[]
  article     Article[]
  image       Image[]
  preview     Preview[]
}

// OAuth

model Account {
  id                String   @id @default(cuid())
  createDate        DateTime @default(now())
  updateDate        DateTime @updatedAt
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  createDate   DateTime @default(now())
  updateDate   DateTime @updatedAt
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  createDate    DateTime  @default(now())
  updateDate    DateTime  @updatedAt
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  comment       Comment[]
  liked         Comment[] @relation("like")
  disliked      Comment[] @relation("dislike")
}

model VerificationToken {
  identifier String
  createDate DateTime @default(now())
  updateDate DateTime @updatedAt
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Basic settings

model Settings {
  key   String @id
  value String
}

model Query {
  id         Int      @id @default(autoincrement())
  createDate DateTime @default(now())
  updateDate DateTime @updatedAt

  name  String
  email String
  query String
}

model QandA {
  id         Int      @id @default(autoincrement())
  createDate DateTime @default(now())
  updateDate DateTime @updatedAt

  question String
  answer   String
}
